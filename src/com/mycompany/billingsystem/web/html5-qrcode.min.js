// Minified version of the html5-qrcode library
(function(e){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=e()}else if(typeof define==="function"&&define.amd){define([],e)}else{var f;if(typeof window!=="undefined"){f=window}else if(typeof global!=="undefined"){f=global}else if(typeof self!=="undefined"){f=self}else{f=this}f.Html5Qrcode=e()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var Html5Qrcode=function(){function e(e){this.verbose=!1;this.verbose=e}e.getCameras=function(){return e.baseMediaStreamFactory.getCameras()};e.prototype.start=function(e,t,n,r){if(!e)throw"elementId cannot be null or undefined";if(!t||!t.video||!t.audio&&"audio"!=t.audio)throw"config parameter missing required video property";if(!n)throw"qrCodeSuccessCallback cannot be null or undefined";var o=this;return new Promise(function(i,s){var a=document.getElementById(e);if(!a)return void s("HTML Element with id="+e+" not found");var u=new Html5Qrcode.Camera(t,a,o.verbose);o.camera=u;var c=function(e,t,r){n(e,t,r),u.cancelImageToMs&&clearTimeout(u.cancelImageToMs)};u.start(c,r).then(function(e){i(e)}).catch(function(e){s(e)})})};e.prototype.stop=function(){return this.camera.stop()};e.prototype.scanFile=function(e,t){if(!e)throw"imageFile cannot be null or undefined";var n=this;return new Promise(function(r,o){var i=function(e,t){n.qrcode.decode(e),r(t)};Html5Qrcode.Image.decode(e,i,o)})};e.getMediaDevices=function(){navigator.mediaDevices?navigator.mediaDevices.enumerateDevices?navigator.mediaDevices.enumerateDevices().then(function(e){return e}):Promise.reject("enumerateDevices() not supported."):Promise.reject("navigator.mediaDevices is not supported.")};return e}();Html5Qrcode.Html5Qrcode=Html5Qrcode,Html5Qrcode.MIN_QR_BOX_SIZE=50,Html5Qrcode.DEFAULT_WIDTH=300,Html5Qrcode.DEFAULT_HEIGHT=300,Html5Qrcode.RESIZE_CANVAS_DEFAULT=!0,Html5Qrcode.VERBOSE=!1,Html5Qrcode.DEFAULT_BOX_SIZE=150,Html5Qrcode.DEFAULT_BORDER_COLOR="rgb(0, 255, 0)",Html5Qrcode.DEFAULT_BORDER_WIDTH=5,Html5Qrcode.DEFAULT_CANVAS_SIZE=250,Html5Qrcode.CANVAS_CONTEXT_NAME="2d",Html5Qrcode.DEFAULT_BACKGROUND_COLOR="rgba(0, 0, 0, 0)",Html5Qrcode.DEFAULT_LINE_WIDTH=4,Html5Qrcode.DEFAULT_STROKE_STYLE="#00ff00",Html5Qrcode.BaseLog = require("./log"),Html5Qrcode.Camera = require("./camera").Camera,Html5Qrcode.Image = require("./image").Image,Html5Qrcode.QrCode = require("./qrcode").QrCode,Html5Qrcode.baseMediaStreamFactory = require("./camera").baseMediaStreamFactory,exports.Html5Qrcode=Html5Qrcode,module.exports=Html5Qrcode},{"./camera":2,"./image":4,"./log":5,"./qrcode":6}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var Camera=function(){function e(e,t,n){this.element=t;var r=e.video,o=e.audio,i=e.qrbox,s=e.aspectRatio;if(this.videoConstraints={video:r,audio:o},this.qrbox=i,this.aspectRatio=s,this.verbose=n,this.snapSound=new Audio("https://sdk.scanqr.org/scan.mp3"),!document.getElementById(this.element.id))throw"HTML Element with id="+this.element.id+" not found";this.videoElement=document.createElement("video"),this.videoElement.style.width="100%",this.videoElement.style.height="100%",this.videoElement.autoplay=!0,this.videoElement.playsinline=!0,this.element.appendChild(this.videoElement)}e.prototype.start=function(t,n){var r=this;return new Promise(function(o,i){e.baseMediaStreamFactory.create(r.videoConstraints,function(e){return r.onMediaStreamReceived(e,t,n,o,i)},function(e){return i(e)})})};e.prototype.stop=function(){return this.localMediaStream?Promise.resolve(this.localMediaStream.getTracks().forEach(function(e){e.stop()})):Promise.resolve()};e.prototype.onMediaStreamReceived=function(e,t,n,r,o){var i=this;try{this.localMediaStream=e,this.videoElement.srcObject=e,this.videoElement.onloadedmetadata=function(e){i.videoElement.play(),i.snap(t,n),r("video feed started")}}catch(e){o("failed to start video stream"),console.error(e)}};e.prototype.snap=function(t,n){if(this.videoElement.videoWidth&&this.videoElement.videoHeight){var r=this.element.clientWidth?this.element.clientWidth:e.DEFAULT_WIDTH,o=this.element.clientHeight?this.element.clientHeight:e.DEFAULT_HEIGHT,i=document.createElement("canvas");i.width=this.videoElement.videoWidth,i.height=this.videoElement.videoHeight;var s=i.getContext("2d");s.drawImage(this.videoElement,0,0,i.width,i.height);var a=s.getImageData(0,0,i.width,i.height),u=new e.QrCode(this.verbose);try{var c=u.decode(a);t(c,a,s)}catch(e){n&&n(e)}this.cancelImageToMs=setTimeout(function(){this.snap(t,n)}.bind(this),100)}};return e}();Camera.DEFAULT_WIDTH=300,Camera.DEFAULT_HEIGHT=300,Camera.QrCode=require("./qrcode").QrCode,Camera.baseMediaStreamFactory=require("./camera-factory").BaseMediaStreamFactory,exports.Camera=Camera},{"./camera-factory":3,"./qrcode":6}],3:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var BaseMediaStreamFactory=function(){function e(){}return e.create=function(t,n,r){navigator.mediaDevices.getUserMedia(t).then(function(e){n(e)}).catch(function(e){r(e.name+": "+e.message)})},e.getCameras=function(){return new Promise(function(t,n){var r=[];navigator.mediaDevices.enumerateDevices().then(function(o){o.forEach(function(e){"videoinput"===e.kind&&r.push({id:e.deviceId,label:e.label})}),t(r)}).catch(function(e){n(e.name+": "+e.message)})})},e}();exports.BaseMediaStreamFactory=BaseMediaStreamFactory},{}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var Image=function(){function e(e){this.verbose=e}return e.decode=function(t,n,r){var o=new FileReader;o.onload=function(){var t=new e,o=t.getCanvas(n);o.width=n,o.height=n;var i=o.getContext("2d");i.clearRect(0,0,o.width,o.height),i.drawImage(this.result,0,0,o.width,o.height);var s=i.getImageData(0,0,o.width,o.height);try{var a=new e.QrCode;n(a.decode(s),s,i)}catch(e){r("QR code parse error, "+e)}}.bind({result:new Image,verbose:this.verbose}),o.readAsDataURL(t)},e.prototype.getCanvas=function(e){var t=document.createElement("canvas");return t.width=e,t.height=e,t},e}();Image.QrCode=require("./qrcode").QrCode,exports.Image=Image},{"./qrcode":6}],5:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var BaseLog=function(){function e(){}return e.log=function(t){e.VERBOSE&&console.log(t)},e}();BaseLog.VERBOSE=!1,exports.BaseLog=BaseLog},{}],6:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var QrCode=function(){function e(e){this.verbose=e,this.qrcode=require("qrcode-reader");var t=new this.qrcode;t.callback=function(e,t){this.qrResult=t}.bind(this)}return e.prototype.decode=function(e){this.qrResult=null;try{this.qrcode.decode(e)}catch(e){if(this.verbose)throw e;throw"QR code parse error, "+e}if(null==this.qrResult)throw"QR code not found.";return this.qrResult.result},e}();exports.QrCode=QrCode,{"qrcode-reader":7}],7:[function(require,module,exports){
(function (process,global,Buffer){
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.qrcode=r():e.qrcode=r()}(this,function(){return function(e){function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}var t={};return r.m=e,r.c=t,r.p="",r(0)}([function(e,r,t){"use strict";function n(e,r,t){var n=e.width;r<0||r>=e.height||t<0||t>=n?!1:e.data[4*(r*n+t)]=255}function o(e){var r,t,o=e.data;for(r=0;r<o.length;r+=4)t=o[r]*o[r]+o[r+1]*o[r+1]+o[r+2]*o[r+2],o[r]=o[r+1]=o[r+2]=t>h?255:0,o[r+3]=255;return e}var i=t(1).Bitmap,a=t(1).Point,u=t(1). quadrilateral,d=t(2),s=t(3),c=t(4),f=t(5),h=40803,g="function"==typeof setImmediate?setImmediate:setTimeout,p={};p.decode=function(e,r){var t;if(r=r||{},t="string"==typeof e?i.fromObjectURL(e):i.fromCanvas(e),"undefined"!=typeof r.inversed)for(var h,p=t.data,v=0;v<p.length;v+=4)h=255-p[v],p[v]=255-p[v+1],p[v+1]=255-p[v+2],p[v+2]=h;o(t);var w,m,b,y,I,E,A=d.grayscale(t).getPoints(),O=[];for(v=0;v<A.length;v++)if(m=A[v],O.indexOf(m.hash)==-1){if(w=s.findPattern(t,m),w){if(y=s.checkPattern(t,w),!y)continue;if(I=s.getAngle(w.pattern),E=s.getModuleSize(w.pattern),b=c(t,w,y,I,E),!b)continue;if("function"==typeof r.preprocess)try{var x=r.preprocess(t,A,w,b);for(var C=Object.keys(x),P=0;P<C.length;P++)b[C[P]]=x[C[P]]}catch(e){return void(r.callback&&r.callback(e))}return n(t,w.points.tr.y,w.points.tr.x),n(t,w.points.tl.y,w.points.tl.x),n(t,w.points.bl.y,w.points.bl.x),void f.extract(t,b,r.callback)}O=O.concat(w?w.points.map(function(e){return e.hash}):[m.hash])}g(function(){r.callback&&r.callback("Couldn't find enough finder patterns")})},p.callback=null,e.exports=p},function(e,r,t){"use strict";function n(e,r,t){var n={};n.fromObjectURL=function(e){return new Promise(function(r,t){var o=new Image;o.crossOrigin="Anonymous",o.addEventListener("load",function(){var t=document.createElement("canvas");t.width=o.width,t.height=o.height;var i=t.getContext("2d");i.drawImage(o,0,0);var a=i.getImageData(0,0,o.width,o.height),u=new e(a,a.width,a.height,a.data);r(u)}),o.addEventListener("error",t),o.src=e})},n.fromCanvas=function(r){var t=r.getContext("2d").getImageData(0,0,r.width,r.height);return new e(t,r.width,r.height,t.data)},e.prototype.inversed=!1,e.prototype.at=function(e,r){var t=this.width,n=this.data;if(e<0||e>=this.height||r<0||r>=t)return 255;var o=n[4*(e*t+r)]+n[4*(e*t+r)+1]+n[4*(e*t+r)+2];return o/=3,this.inversed?255-o:o},e.prototype.getPoints=function(){var e,r,t=[],n=this.data,o=this.width;for(e=0;e<this.height;e++)for(r=0;r<o;r++)n[4*(e*o+r)]<128&&t.push(new a(r,e));return t},r.Bitmap=e,r.Point=a,r.quadrilateral=o},function(e,r,t){"use strict";function n(e,r,t,o,i,a,u){var d,s,c,f,h,g,p,v,w,m,b,y=e.data,I=e.width,E=[],A=function(e){var r=y[4*(e*I+t)];return r<128};if(A(r))return!1;for(s=r;--s>=0&&!A(s););if(s<0)return!1;for(c=r;++c<e.height&&!A(c););if(c==e.height)return!1;for(d=(s+c)/2,o.push(new o(t,d)),f=d+1,h=d-1,g=!0;g;){for(;f<c&&!A(f);)f++;for(;h>s&&!A(h);)h--;if(g=h>s&&f<c){for(p=h;--p>s&&!A(p););if(p==s)return!1;for(v=f;++v<c&&!A(v););if(v==c)return!1;w=(p+v)/2,E.push({start:h,end:f}),o.push(new o(t,w)),f=w+1,h=w-1}}for(m=E.pop();b=E.pop();)if(m.end-m.start!=b.end-b.start)return!1;for(m=o[o.length-1],s=m.y;--s>=0&&!A(s););if(s<0)return!1;for(c=m.y;++c<e.height&&!A(c););if(c==e.height)return!1;return d=(s+c)/2,Math.abs(d-m.y)<i}var o=t(1).Point;r.grayscale=function(e){var r,t=new Uint8ClampedArray(e.data.length),o=e.data,i=t;for(r=0;r<o.length;r+=4)i[r]=i[r+1]=i[r+2]=.2126*o[r]+.7142*o[r+1]+.0722*o[r+2],i[r+3]=o[r+3];return new e.constructor(e,e.width,e.height,t)},r.findCenter=function(e,r,t,n,o,i,a){var u=Math.round((r+n)/2),d=Math.round((t+o)/2),s=u,c=d,f=s,h=c;do s--;while(s>=0&&!e.get(s,c));do c--;while(c>=r&&!e.get(s,c));do f++;while(f<n&&!e.get(f,c));do h++;while(h<o&&!e.get(s,h));return(s+f+u)/3},r.checkEquals=function(e,r,t,n,o){var i=e-r;return Math.sqrt(i*i)>=t},r.getMiddle=function(e,r){return new o(e.x+Math.round((r.x-e.x)/2),e.y+Math.round((r.y-e.y)/2))},r.getDistance=function(e,r){var t=e.x-r.x,n=e.y-r.y;return Math.sqrt(t*t+n*n)},r.getPattern=function(e,r,t,o,i,a,u){var d,s,c,f,h,g,p,v,w,m,b;for(f=r.y,h=f,g=f,p=f,d=r.x;d>=0&&!e.get(f,d);)d--;for(d++;d<e.width&&!e.get(f,d);)d++;for(s=d,d=r.x;d>=0&&!e.get(h,d);)h++;for(d=r.x;d<e.width&&!e.get(h,d);)h--;for(v=h,h=r.y,d=r.x;d<e.width&&!e.get(g,d);)g++;for(d=r.x;d>=0&&!e.get(g,d);)g--;for(w=g,g=r.y,d=r.x;d>=0&&!e.get(p,d);)p--;for(d=r.x;d<e.width&&!e.get(p,d);)p++;return m=p,b=s},r.isWhite=n},function(e,r,t){"use strict";function n(e,r,t,n){var o,i=e.y-r.y,a=e.x-r.x,u=Math.sqrt(i*i+a*a),d=n.x-t.x,s=n.y-t.y,c=Math.sqrt(d*d+s*s);return Math.abs(u-c)<2}var o=t(1).Point,i=t(2).getDistance,a=t(2).getMiddle;r.findPattern=function(e,r){var t,n,a,u,d,s,c,f,h,g,p=1,v=7*p,w=e.height,m=e.width,b=[],y=r.x,I=r.y;for(u=I-v;u<I+v;u++)for(a=y-v;a<y+v;a++)if(!(u<0||u>=w||a<0||a>=m)&&e.at(u,a)<128){for(t=u,n=0;n<5;n++){for(s=!0,d=u;d>=0&&e.at(d,a)<128;)d--;if(d<0){s=!1;break}for(c=u;c<w&&e.at(c,a)<128;)c++;if(c>=w){s=!1;break}if(Math.abs(c-u-(u-d))>(u-d)/2){s=!1;break}for(d=a;d>=0&&e.at(u,d)<128;)d--;if(d<0){s=!1;break}for(c=a;c<m&&e.at(u,c)<128;)c++;if(c>=m){s=!1;break}if(Math.abs(c-a-(a-d))>(a-d)/2){s=!1;break}for(f=u-1;f>d;f--)if(e.at(f,a-1)<128&&e.at(f,a+1)<128){s=!1;break}for(h=i(new o(u,a),new o(d,c))/p,g=e.at(Math.floor(u-.1*h),Math.floor(a-.1*h)),g>128&&(g=e.at(Math.floor(u+.1*h),Math.floor(a+.1*h)))>128&&(g=e.at(Math.floor(u-.1*h),Math.floor(a+.1*h)))>128&&(g=e.at(Math.floor(u+.1*h),Math.floor(a-.1*h)))>128;u=Math.floor(Math.random()*w),a=Math.floor(Math.random()*m)}if(s)return b.push(new o(a,u)),{center:new o(a,u),points:b}}};var u={};r.getAngle=function(e){var r=i(e.tl,e.tr),t=i(e.tl,e.bl),n=Math.acos((r*r+t*t-i(e.tr,e.bl)*i(e.tr,e.bl))/(2*r*t));return u.angle=n,n},r.getModuleSize=function(e){return(i(e.tl,e.tr)/7+i(e.tl,e.bl)/7)/2},r.checkPattern=function(e,r){var t,d,s,c,f,h,g,p,v,w,m,b,y,I,E,A,O,x,C,P,S,L,M,_,B,N,T,R,D,j,k,U,G,H,F,z,V,q,W,X,J,K,Q,Y,Z,$,ee,re,te,ne,oe,ie,ae,ue,de,se,ce,fe,he,ge,pe,ve,we,me,be,ye,Ie,Ee,Ae,Oe,xe,Ce,Pe,Se,Le,Me,_e,Be,Ne,Te,Re,De,je,ke,Ue,Ge,He,Fe,ze,Ve,qe,We,Xe,Je,Ke,Qe,Ye,Ze,$e,er,rr,tr,nr,or,ir,ar,ur,dr,sr,cr,fr,hr,gr=r.center,pr=a(r.center,r.points[0]),vr=Math.ceil(i(gr,pr)),wr={tl:null,tr:null,bl:null},mr={tl:0,tr:0,bl:0};for(s=0;s<4*Math.PI;s+=.1)for(g=Math.cos(s),p=Math.sin(s),b=Math.round(pr.y+vr*p),y=Math.round(pr.x+vr*g),e.at(b,y)>128&&(h=1);h;){if(vr--,b=Math.round(pr.y+vr*p),y=Math.round(pr.x+vr*g),e.at(b,y)<128)break;vr<1&&(h=0)}if(vr++,b=Math.round(pr.y+vr*p),y=Math.round(pr.x+vr*g),v=new o(y,b),b=Math.round(pr.y-vr*p),y=Math.round(pr.x-vr*g),w=new o(y,b),vr=Math.ceil(i(v,w)),t=0;t<3;t++){switch(t){case 0:b=Math.round(pr.y+(vr+t)*p),y=Math.round(pr.x+(vr+t)*g);break;case 1:b=Math.round(pr.y-(vr+t)*p),y=Math.round(pr.x-(vr+t)*g);break;case 2:b=Math.round(pr.y),y=Math.round(pr.x)}for(m={x:[],y:[]},d=0;d<4*Math.PI;d+=.1){g=Math.cos(d),p=Math.sin(d);for(h=1,I=1;h;){if(b=Math.round(b+I*p),y=Math.round(y+I*g),e.at(b,y)>128){m.x.push(y),m.y.push(b),I=1;break}I++,I>2*vr&&(h=0)}}var br=Math.max(m.x),yr=Math.max(m.y),Ir=Math.min(m.x),Er=Math.min(m.y);switch(vr=(br-Ir+yr-Er)/2/4,f={tl:new o(Ir,Er),tr:new o(br,Er),bl:new o(Ir,yr),br:new o(br,yr)},t){case 0:for(E=0;E<m.x.length;E++)A=m.x[E],O=m.y[E],x=A-Ir,C=O-Er,P=Math.sqrt(x*x+C*C),P>mr.tl&&(mr.tl=P,wr.tl=new o(A,O));break;case 1:for(E=0;E<m.x.length;E++)S=i(new o(m.x[E],m.y[E]),f.tl),L=i(new o(m.x[E],m.y[E]),f.tr),M=i(new o(m.x[E],m.y[E]),f.bl),_=i(new o(m.x[E],m.y[E]),f.br),A=m.x[E],O=m.y[E],x=A-br,C=O-Er,P=Math.sqrt(x*x+C*C),P>mr.tr&&(mr.tr=P,wr.tr=new o(A,O)),B=A-br,N=O-yr,P=Math.sqrt(B*B+N*N),P>mr.br&&(mr.br=P,wr.br=new o(A,O)),T=A-Ir,R=O-yr,P=Math.sqrt(T*T+R*R),P>mr.bl&&(mr.bl=P,wr.bl=new o(A,O))}}return D=i(wr.tl,wr.tr),j=i(wr.tl,wr.bl),k=i(wr.tr,wr.bl),U=Math.abs(D-j)<2,G=Math.abs(Math.sqrt(D*D+j*j)-k)<2,H=a(wr.tl,wr.tr),F=a(wr.tl,wr.bl),z=a(wr.tr,wr.bl),V=Math.ceil(i(H,gr)),q=Math.ceil(i(F,gr)),W=Math.ceil(i(z,gr)),X=Math.cos(Math.PI/4),J=Math.sin(Math.PI/4),K=new o(Math.round(gr.x+V*X),Math.round(gr.y+V*J)),Q=new o(Math.round(gr.x-V*X),Math.round(gr.y-V*J)),Y=new o(Math.round(gr.x-q*X),Math.round(gr.y+q*J)),Z=new o(Math.round(gr.x+q*X),Math.round(gr.y-q*J)),$=new o(Math.round(gr.x+W*X),Math.round(gr.y-W*J)),ee=new o(Math.round(gr.x-W*X),Math.round(gr.y+W*J)),re=e.at(K.y,K.x)>128,te=e.at(Q.y,Q.x)>128,ne=e.at(Y.y,Y.x)>128,oe=e.at(Z.y,Z.x)>128,ie=e.at($.y,$.x)>128,ae=e.at(ee.y,ee.x)>128,U=i(wr.tl,wr.tr),ue=i(wr.tl,wr.bl),de=i(wr.tr,wr.bl),se=Math.sqrt(U*U+ue*ue),ce=Math.abs(se-de)<2,fe=i(wr.tr,wr.bl)>i(wr.tl,wr.bl)&&i(wr.tr,wr.bl)>i(wr.tl,wr.tr),he=i(wr.bl,wr.tr)>i(wr.tl,wr.tr)&&i(wr.bl,wr.tr)>i(wr.tl,wr.bl),ge=i(wr.tl,wr.tr)>i(wr.bl,wr.tr)&&i(wr.tl,wr.tr)>i(wr.tl,wr.bl),pe=(wr.tl,wr.tr,wr.bl,n(wr.tl,wr.tr,wr.bl,wr.br)),ve=(wr.tr,wr.bl,wr.tl,wr.br),we=n(wr.bl,wr.tl,wr.tr,wr.br),me=Math.abs(1-i(wr.tl,wr.tr)/i(wr.tl,wr.bl))<2||Math.abs(1-i(wr.tl,wr.bl)/i(wr.tl,wr.tr))<2,be=Math.abs(1-i(wr.tl,wr.tr)/i(wr.tr,wr.bl))<2||Math.abs(1-i(wr.tr,wr.bl)/i(wr.tl,wr.tr))<2,ye=Math.abs(1-i(wr.tl,wr.bl)/i(wr.tr,wr.bl))<2||Math.abs(1-i(wr.tr,wr.bl)/i(wr.tl,wr.bl))<2,Ie=i(wr.tl,wr.tr),Ee=i(wr.tl,wr.bl),Ae=i(wr.tr,wr.bl),Oe=Math.acos(Math.abs(wr.tl.x-wr.tr.x)/Ie)>Math.PI/3&&Math.acos(Math.abs(wr.tl.y-wr.tr.y)/Ie)>Math.PI/3,xe=Math.acos(Math.abs(wr.tl.x-wr.bl.x)/Ee)>Math.PI/3&&Math.acos(Math.abs(wr.tl.y-wr.bl.y)/Ee)>Math.PI/3,Ce=Math.acos(Math.abs(wr.tr.x-wr.bl.x)/Ae)>Math.PI/3&&Math.acos(Math.abs(wr.tr.y-wr.bl.y)/Ae)>Math.PI/3,Pe=a(wr.tl,wr.tr),Se=a(wr.tl,wr.bl),Le=a(wr.tr,wr.bl),Me=i(Pe,gr)>5,Be=i(Se,gr)>5,Ne=i(Le,gr)>5,Te=wr.tl,Re=wr.tr,De=wr.bl,je=i(Te,Re),ke=i(Te,De),Ue=i(Re,De),Ge=Math.acos((je*je+ke*ke-Ue*Ue)/(2*je*ke)),He=Math.acos((je*je+Ue*Ue-ke*ke)/(2*je*Ue)),Fe=Math.acos((Ue*Ue+ke*ke-je*je)/(2*Ue*ke)),ze=Math.abs(Ge-Math.PI/2)<.2,Ve=Math.abs(He-Math.PI/2)<.2,qe=Math.abs(Fe-Math.PI/2)<.2,We=wr.tr,Xe=wr.tl,Je=wr.bl,Ke=i(We,Xe),Qe=i(We,Je),Ye=i(Xe,Je),Ze=Math.acos((Ke*Ke+Qe*Qe-Ye*Ye)/(2*Ke*Qe)),$e=Math.abs(Ze-Math.PI/2)<.2,er=wr.bl,rr=wr.tl,tr=wr.tr,nr=i(er,rr),or=i(er,tr),ir=i(rr,tr),ar=Math.acos((nr*nr+or*or-ir*ir)/(2*nr*or)),ur=Math.abs(ar-Math.PI/2)<.2,dr=ze&&ur&&!$e?{tl:wr.tl,tr:wr.tr,bl:wr.bl}:ze&&$e&&!ur?{tl:wr.tl,tr:wr.tr,bl:wr.bl}:ur&&$e&&!ze?{tl:wr.tl,tr:wr.tr,bl:wr.bl}:ze&&$e&&ur?{tl:wr.tl,tr:wr.tr,bl:wr.bl}:{},sr=i(dr.tl,dr.tr)>i(dr.tl,dr.bl)?dr.tl:dr.bl,cr=i(dr.tl,dr.tr)>i(dr.tl,dr.bl)?dr.tr:dr.tl,fr=i(dr.tl,dr.tr)>i(dr.tl,dr.bl)?dr.bl:dr.tr,hr=Math.sqrt(Math.pow(i(dr.tl,dr.tr),2)+Math.pow(i(dr.tl,dr.bl),2)),ze||$e||ur?{tl:sr,tr:cr,bl:fr}:void 0},function(e,r,t){"use strict";var n=t(1).Point,o=t(2).getDistance,i=t(1).quadrilateral,a=function(e,r,t,a,u){var d,s,c,f,h,g,p,v,w,m,b,y,I,E,A,O,x,C,P=o(r.tl,r.tr),S=o(r.tl,r.bl),L=Math.ceil(P/u),M=Math.ceil(S/u);return M%2==0&&M++,L%2==0&&L++,M=L,c=(r.tr.x-r.tl.x)/L,f=(r.tr.y-r.tl.y)/L,h=(r.bl.x-r.tl.x)/L,g=(r.bl.y-r.tl.y)/L,v=[],w=new n(r.tl.x+h/2+c/2,r.tl.y+g/2+f/2),d=0;d<L;d++){for(m=[],s=0;s<L;s++)p=e.at(Math.round(w.y+d*g+s*f),Math.round(w.x+d*h+s*c)),m.push(p<128?1:0);v.push(m)}for(b={x:[],y:[]},d=0;d<v.length;d++)for(s=0;s<v[d].length;s++)1==v[d][s]&&(b.x.push(s),b.y.push(d));return y=Math.max.apply(null,b.x),I=Math.max.apply(null,b.y),E=Math.min.apply(null,b.x),A=Math.min.apply(null,b.x),O=y-E,x=I-A,C=v.length,new i(new n(r.tl.x+.5*c+.5*h,r.tl.y+.5*f+.5*g),new n(r.tl.x+C*c+.5*c+.5*h,r.tl.y+C*f+.5*f+.5*g),new n(r.tl.x+C*h+.5*c+.5*h,r.tl.y+C*g+.5*f+.5*g),new n(r.tl.x+.5*c+.5*h,r.tl.y+.5*f+.5*g))};e.exports=function(e,r,t,n,o){var u,d,s,c,f,h,g,p,v,w=t,m=o,b=[],y=Math.round(m),I=Math.round(21+31/4*(y-1)),E=.5,A={x:3.5,y:3.5};for(u=0;u<4;u++){for(d=0;d<4;d++)b.push(1);b.push(0)}for(b.push(1,1,1,1),u=0;u<4;u++)b.push(0);b.push(0,0,0,0,0,0);var O=e.at(w.tl.y,w.tl.x)<128,x=e.at(w.tr.y,w.tr.x)<128,C=e.at(w.bl.y,w.bl.x)<128,P=e.at(w.tr.y+I*(w.bl.y-w.tl.y)/I,w.tr.x+I*(w.bl.x-w.tl.x)/I),S={};return s=O&&!x&&!C?0:!O&&x&&!C?1:!O&&!x&&C?2:3,c=(w.tr.x-w.tl.x)/I,f=(w.tr.y-w.tl.y)/I,h=(w.bl.x-w.tl.x)/I,g=(w.bl.y-w.tl.y)/I,p=[],v=new n(w.tl.x+h*E+c*E,w.tl.y+g*E+f*E),u=0;u<I;u++){for(d=0;d<I;d++)e.at(Math.round(v.y+u*g+d*f),Math.round(v.x+u*h+d*c))>128?p.push(0):p.push(1)}S.matrix=p,S.dimension=I,S.alignmentPattern=a(e,w,n,o),S}},function(e,r,t){function n(e,r){for(var t,n,o,i,a,u,d,s=r<<3|e,c=s,f=7973;--f>0;)c=(c<<1|c>>>31)^s;for(f=4;--f>0;)t=(g[f-1]^c)&255,n=p[t],o=(g[f]^c>>>8)&255,i=p[o],a=(g[f+1]^c>>>16)&255,u=p[a],d=(g[f+2]^c>>>24)&255,s=p[d]^u<<8^i<<16^n<<24;return s}function o(e,r){var t=e.dimension,n=t-17>>2,o=f[n],a=h[n],u=new Array(o),d=0;for(d=0;d<o;d++)u[d]=new Array(o);var s=o-1,c=t-1,g=t-8;for(d=0;d<o;d++)for(var p=i(d,s),v=0;v<o;v++){var w=i(v,s),m=1&a[u[p][w]=r(g-11*p,g-11*w)];m&&(e.matrix[g-11*p-1<<5|g-11*w-1]=1,e.matrix[g-11*p-1<<5|g-11*w]=1,e.matrix[g-11*p<<5|g-11*w-1]=1,e.matrix[g-11*p<<5|g-11*w]=1)}}function i(e,r){var t=e-r;return t>=0?t:t+7}function a(e,r,t){var n,o,i=e.dimension;for(o=0;o<i;o++)for(n=0;n<i;n++)t(n,o)||r(n,o)}function u(e,r){var t=d[r];return 1&e.matrix[t[0]]<<5|t[1]}function d(e,r,t){function n(e,r,t){return(e<<1|e>>4)^r^t}function o(e){return e<1352?i[e]:i[e-1352]}function i(e){var r=e%10,t=e/10>>0,i=a[t][r/3>>0];return 1&(i>>2-r%3)}for(var a=[[21,30,25,18],[20,28,26,16],[23,26,30,22],[22,24,28,20]],u=0,d=0;d<15;d++){var s=t[d];s<7?u=n(u,1,r(8,s)):s>8&&(u=n(u,1,r(14-s,8)))}return 1&(u^o(1010101))}var s=t(6),c={};c.extract=function(e,r,t){var n=r.matrix;return 1&n[136]?i(n,t):i(n,t)};var f=[0,2,3,4,5,6],h=[[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,0],[1,1,1,1,1,0,0,0],[1,1,1,0,0,1,1,0],[1,1,0,1,0,1,0,0],[1,1,0,0,1,1,1,0],[1,0,1,1,1,0,1,0],[1,0,1,0,0,0,0,0],[1,0,0,1,0,0,1,0],[1,0,0,0,1,0,0,0],[0,1,1,1,0,1,1,0],[0,1,1,0,1,1,0,0],[0,1,0,1,1,1,1,0],[0,1,0,0,0,1,0,0],[0,0,1,1,1,1,0,0],[0,0,1,0,0,1,1,0],[0,0,0,1,1,0,1,0]],g=[30634,29402,32170,30877,26159],p=new Array(256);!function(e){for(var r=0,t=1;r<255;r++){e[r]=t,t<<=1,256&t&&(t^=285)}for(r=0;r<255;r++)e[p[e[r]]=r]=r}(new Array(256));var v=new Array(256),w=new Array(256);!function(e,r){for(var t=0;t<255;t++)e[t]=r[254-t];e[255]=e[0],r[255]=r[0]}(v,w);var m={};m.decode=function(e,r){var t=new s(v,0);return t.decode(e,r)};var b={};b.decode=function(e,r){var t=new s(v,1);return t.decode(e,r)},b.correct=function(e,r){var t=new s(w,1);return t.decode(e,r)},c.extract=function(e,r,t){var i=r.dimension,s=u(r,function(r,t){return 1&e.matrix[r<<5|t]},d);o(r,function(r,t){return 1&e.matrix[r<<5|t]});var c,f,h,g=n(s>>10,(7&s)>>2);for(a(r,function(r,t){return 1^=((r+t)%2),r<8&&t<8||r<8&&t>i-9||r>i-9&&t<8?0:1&e.matrix[r*i+t]^g},function(r,t){return r<6&&t<6||r>i-7&&t<6||r<6&&t>i-7}),c=0,f=0;f<i;f++)for(h=0;h<i;h++)r(f,h)&&(c=c<<1|1&e.matrix[f*i+h]);return m.decode(c)},e.exports=c},function(e,r){function t(e,r,t){this.expTable=e,this.logTable=r,this.poly=new Int32Array(t),this.degree=t}function n(e,r){this.field=e,this.values=r}t.prototype.multiply=function(e,r){var t,n,o,i=this.expTable,a=this.logTable,u=new Int32Array(e.degree+r.degree-1);for(n=0;n<r.degree;n++)if(0!==(o=r.values[n])){var d=a[o];for(t=0;t<e.degree;t++)if(0!==(n=e.values[t]))u[t+n]^=i[a[n]+d]}return new this.constructor(this.field,u)},t.prototype.multiplyScalar=function(e,r){for(var t=this.expTable,n=this.logTable[r],o=new Int32Array(e.degree),i=0;i<e.degree;i++)0!==e.values[i]&&(o[i]=t[n[e.values[i]]+n]);return new this.constructor(this.field,o)},t.prototype.add=function(e,r){var t,n=Math.max(e.degree,r.degree),o=new Int32Array(n);for(t=0;t<n;t++)o[t]=(t<e.degree?e.values[t]:0)^(t<r.degree?r.values[t]:0);return new this.constructor(this.field,o)},t.prototype.mod=function(e,r){if(e.degree<r.degree)return e;var t,n,o=this.logTable,i=e.values.slice(0);for(t=e.degree-r.degree;t>=0;t--)if(0!==(n=i[t])){var a=o[n];for(var u=1;u<r.degree;u++)i[t+u]^=this.expTable[a+o[r.values[u]]]}return new this.constructor(this.field,i.slice(e.degree-r.degree))},t.prototype.evaluate=function(e,r){var t,n=this.expTable,o=this.logTable[r],i=0;for(t=0;t<e.degree;t++)i=e.values[t]^n[o+o[i]];return i},n.prototype.add=function(e,r){var t=Math.max(e.length,r.length),n=new Int32Array(t),o=e.length-r.length;if(o>0)for(var i=0;i<o;i++)n[i]=e[i];else for(i=0;i<-o;i++)n[i]=r[i];for(i=Math.max(0,-o);i<t;i++)n[i]=e[i+Math.min(0,o)]^r[i+Math.min(0,-o)];return n};var o={};o.Decoder=function(e,r){this.field=e,this.type=r,this.rs=new t(e,r?1:0)},o.Decoder.prototype.decode=function(e,r){var t=this.rs.mod(e,r);return this.rs.add(e,t)},e.exports=o}])})}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":8,"buffer":9}],8:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout = function() {
    try {
        return setTimeout;
    } catch (e) {
        return function() {
            throw new Error('setTimeout is not defined');
        }
    }
}();
var cachedClearTimeout = function() {
    try {
        return clearTimeout;
    } catch (e) {
        return function() {
            throw new Error('clearTimeout is not defined');
        }
    }
}();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    try {
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    try {
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],9:[function(require,module,exports){
(function (global){
'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 * === true    Use Uint8Array implementation (fastest)
 * === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, implementation is a little more complicated than just checking
 * `typeof Uint8Array` != 'undefined'.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */
function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start position.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (Issue #2)
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array#toString()
  // as it checks TWO conditions for determining completeness.
  // ALMOST as if it's designed to be abused.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{1,2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset `byteOffset`,
// OR the last index of `val` in `buffer` at offset `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index from which to begin searching
// - encoding - an optional encoding, relevant when val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case if val is empty
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16LE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset, length) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    this.writeUInt8(value & 0xff, offset, true)
    this.writeUInt8(value >>> 8, offset + 1, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    this.writeUInt8(value >>> 8, offset, true)
    this.writeUInt8(value & 0xff, offset + 1, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    this.writeUInt8(value & 0xff, offset, true)
    this.writeUInt8((value >> 8) & 0xff, offset + 1, true)
    this.writeUInt8((value >> 16) & 0xff, offset + 2, true)
    this.writeUInt8((value >> 24) & 0xff, offset + 3, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    this.writeUInt8((value >> 24) & 0xff, offset, true)
    this.writeUInt8((value >> 16) & 0xff, offset + 1, true)
    this.writeUInt8((value >> 8) & 0xff, offset + 2, true)
    this.writeUInt8(value & 0xff, offset + 3, true)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    this.writeInt8(value & 0xff, offset, true)
    this.writeInt8(value >>> 8, offset + 1, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    this.writeInt8(value >>> 8, offset, true)
    this.writeInt8(value & 0xff, offset + 1, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    this.writeInt8(value & 0xff, offset, true)
    this.writeInt8((value >> 8) & 0xff, offset + 1, true)
    this.writeInt8((value >> 16) & 0xff, offset + 2, true)
    this.writeInt8((value >> 24) & 0xff, offset + 3, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    this.writeInt8((value >> 24) & 0xff, offset, true)
    this.writeInt8((value >> 16) & 0xff, offset + 1, true)
    this.writeInt8((value >> 8) & 0xff, offset + 2, true)
    this.writeInt8(value & 0xff, offset + 3, true)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so handle them here.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \r from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for missing padding, base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (((leadSurrogate - 0xD800) << 10) | (codePoint - 0xDC00)) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        (codePoint >> 0x6) | 0xC0,
        (codePoint & 0x3F) | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        (codePoint >> 0xC) | 0xE0,
        ((codePoint >> 0x6) & 0x3F) | 0x80,
        (codePoint & 0x3F) | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        (codePoint >> 0x12) | 0xF0,
        ((codePoint >> 0xC) & 0x3F) | 0x80,
        ((codePoint >> 0x6) & 0x3F) | 0x80,
        (codePoint & 0x3F) | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node.js converts strings with leading zeros straight to ascii chars
    // rather than octal representation
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":10,"ieee754":11,"isarray":12}],10:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // an equal sign is found on last two positions
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function fromByteArray (uint8) {
  var i, tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(
      lookup[tmp >> 18 & 0x3F] +
      lookup[tmp >> 12 & 0x3F] +
      lookup[tmp >> 6 & 0x3F] +
      lookup[tmp & 0x3F]
    )
  }
  return output.join('')
}

},{}],11:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e - eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],12:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}]},{},[1])(1)
});

